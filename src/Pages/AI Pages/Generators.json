{
    "topic": "Generators in JavaScript",
    "content": [
    {
    "type": "paragraph",
    "text": "Generators are a new feature introduced in ES6 that allow for the creation of iterators in a more readable and maintainable way. They are functions that can be paused and resumed, allowing for the iterative generation of values."
    },
    {
    "type": "funFact",
    "text": "Generators are defined using the 'function*' syntax."
    },
    {
    "type": "code",
    "text": "Here's an example of a simple generator that yields values in a loop:",
    "code": "function* loop(start, end) {\n for (let i = start; i <= end; i++) {\n yield i;\n }\n}\n\nconst generator = loop(1, 5);\n\nconsole.log(generator.next().value); // Output: 1\nconsole.log(generator.next().value); // Output: 2\nconsole.log(generator.next().value); // Output: 3\nconsole.log(generator.next().value); // Output: 4\nconsole.log(generator.next().value); // Output: 5"
    },
    {
    "type": "funFact",
    "text": "Generators can be used to handle asynchronous code in a more readable and maintainable way, by using the 'yield' keyword to pause the function until a promise is resolved."
    },
    {
    "type": "code",
    "text": "Here's an example of a generator function that handles asynchronous code using promises:",
    "code": "function* fetchData() {\n const data1 = yield fetch('https://api.example.com/data1');\n const data2 = yield fetch('https://api.example.com/data2');\n return [data1, data2];\n}\n\nconst generator = fetchData();\n\nconst promise1 = generator.next().value;\npromise1.then(data => {\n const promise2 = generator.next(data).value;\n promise2.then(data => {\n const result = generator.next(data).value;\n console.log(result); // Output: [data1, data2]\n });\n});"
    },
    {
    "type": "quiz",
    "question": "What is the syntax for defining a generator function?",
    "options": [
    "function* myGenerator() {}",
    "const myGenerator = () => {}",
    "function myGenerator() {}",
    "All of the above"
    ],
    "answer": "function* myGenerator() {}"
    },
    {
    "type": "funFact",
    "text": "Generators can also be used with the 'for...of' loop to iterate over the values generated by the generator."
    },
    {
    "type": "code",
    "text": "Here's an example of using a generator with the 'for...of' loop:",
    "code": "function* range(start, end) {\n for (let i = start; i <= end; i++) {\n yield i;\n }\n}\n\nfor (const number of range(1, 5)) {\n console.log(number);\n} // Output: 1, 2, 3, 4, 5"
    }
    ]
    }