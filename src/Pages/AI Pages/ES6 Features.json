{
    "topic": "ES6 Features in JavaScript",
    "content": [
        {
            "type": "paragraph",
            "text": "ES6 (ECMAScript 2015) introduced many new features and improvements to JavaScript, making it a more powerful and expressive language. Some of the key features of ES6 include arrow functions, let and const declarations, template literals, and classes."
        },
        {
            "type": "funFact",
            "text": "ES6 was the first major update to the language since 2009, when ECMAScript 5 (ES5) was released."
        },
        {
            "type": "code",
            "text": "Here is an example of an arrow function:",
            "code": "const add = (a, b) => a + b;"
        },
        {
            "type": "quiz",
            "question": "What is the difference between let and const?",
            "options": [
                "There is no difference",
                "let can be reassigned, const cannot",
                "const can be reassigned, let cannot",
                "let and const are used for different types of variables"
            ],
            "answer": "let can be reassigned, const cannot"
        },
        {
            "type": "code",
            "text": "Here is an example of a template literal:",
            "code": "const name = 'John';\nconsole.log(Hello, ${name}!);"
        },
        {
            "type": "funFact",
            "text": "Template literals allow for easier string interpolation and multiline strings in JavaScript."
        },
        {
            "type": "quiz",
            "question": "What is a class in JavaScript?",
            "options": [
                "A constructor function with a prototype",
                "A new data type introduced in ES6",
                "A type of object that cannot be instantiated",
                "A function that returns an object"
            ],
            "answer": "A constructor function with a prototype"
        },
        {
            "type": "code",
            "text": "Here is an example of a class:",
            "code": "class Person {\n constructor(name, age) {\n this.name = name;\n this.age = age;\n }\n\n sayHello() {\n console.log(Hello, my name is ${this.name} and I am ${this.age} years old.);\n }\n}\n\nconst john = new Person('John', 30);\njohn.sayHello();"
        },
        {
            "type": "funFact",
            "text": "ES6 also introduced new array methods like map, reduce, and filter, which make it easier to work with arrays in JavaScript."
        },
        {
            "type": "paragraph",
            "text": "The spread operator is a useful feature in ES6 that allows an iterable such as an array or string to be expanded into individual elements or characters. It is denoted by three dots (...)."
        },
        {
            "type": "funFact",
            "text": "The spread operator can be used in various ways, including creating a new array with the contents of an existing array, passing multiple arguments to a function, and copying the properties of an object to a new object."
        },
        {
            "type": "code",
            "text": "Here is an example of using the spread operator to create a new array:",
            "code": "const numbers = [1, 2, 3];\nconst newNumbers = [...numbers, 4, 5, 6];\nconsole.log(newNumbers); // [1, 2, 3, 4, 5, 6]"
        },
        {
            "type": "quiz",
            "question": "What is the syntax for the spread operator?",
            "options": [
                "!",
                "...",
                "@",
                "#"
            ],
            "answer": "..."
        },
        {
            "type": "paragraph",
            "text": "ES6 introduced two new ways to declare variables in JavaScript: let and const. These new variable declarations provide better scoping and immutability, respectively."
        },
        {
            "type": "funFact",
            "text": "Before ES6, the only way to declare a variable was with the 'var' keyword, which had some drawbacks in terms of scoping and hoisting."
        },
        {
            "type": "code",
            "text": "Here is an example of using 'let' to declare a variable within a block scope:",
            "code": "function printNumbers() {\n for (let i = 0; i < 5; i++) {\n console.log(i);\n }\n console.log(i); // ReferenceError: i is not defined\n}"
        },
        {
            "type": "quiz",
            "question": "What is the difference between 'let' and 'var'?",
            "options": [
                "There is no difference",
                "'let' provides block scoping, while 'var' does not",
                "'let' provides immutability, while 'var' does not",
                "Both 'let' and 'var' provide immutability and block scoping"
            ],
            "answer": "'let' provides block scoping, while 'var' does not"
        }
    ]
}