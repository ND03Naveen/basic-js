{
    "topic": "Functions in JavaScript",
    "content": [
        {
            "type": "paragraph",
            "text": "Functions are one of the most important concepts in JavaScript. A function is a reusable block of code that performs a specific task."
        },
        {
            "type": "funFact",
            "text": "In JavaScript, functions are first-class objects, which means they can be assigned to variables, passed as arguments to other functions, and returned as values from functions."
        },
        {
            "type": "paragraph",
            "text": "In JavaScript, there are two ways to create a function: function declarations and function expressions."
        },
        {
            "type": "code",
            "text": "Here is an example of a function declaration:",
            "code": "function greet(name) {\n console.log(`Hello, ${name}!`);\n}"
        },
        {
            "type": "code",
            "text": "Here is an example of a function expression:",
            "code": "const square = function(x) {\n return x * x;\n};"
        },
        {
            "type": "funFact",
            "text": "Function declarations are defined at the beginning of the scope and can be called anywhere in the scope, while function expressions are defined at the point of assignment and can only be called after they are defined."
        },
        {
            "type": "quiz",
            "question": "What is the difference between a function declaration and a function expression?",
            "options": [
                "There is no difference",
                "Function expressions can be named",
                "Function declarations can be used before they are defined",
                "Function expressions are more efficient"
            ],
            "answer": "Function declarations can be used before they are defined"
        },
        {
            "type": "funFact",
            "text": "JavaScript functions can also have default parameter values and can use the 'arguments' object to access all of the arguments passed to the function, even if they were not defined as formal parameters."
        },
        {
            "type": "code",
            "text": "Example:",
            "code": "function greet(name = \"World\") {\n console.log(`Hello, ${name}!`);\n console.log(`There were ${arguments.length} arguments passed to this function`);\n}\n\ngreet(); // Output: Hello, World! There were 0 arguments passed to this function\ngreet(\"John\", \"Doe\"); // Output: Hello, John! There were 2 arguments passed to this function"
        },
        {
            "type": "funFact",
            "text": "Functions in JavaScript can be used as callbacks, which are functions passed as arguments to other functions and called when a specific event occurs."
        },
        {
            "type": "code",
            "text": "Example:",
            "code": "function greeting(name) {\n console.log(Hello, ${name}!);\n}\n\nfunction saySomething(callback) {\n callback(\"John\");\n}\n\nsaySomething(greeting); // Output: Hello, John!"
        },
        {
            "type": "quiz",
            "question": "What is a callback function?",
            "options": [
                "A function that is called when a specific event occurs",
                "A function that is only used in callbacks",
                "A function that cannot be assigned to a variable",
                "A function that returns a value"
            ],
            "answer": "A function that is called when a specific event occurs"
        }
    ]
}